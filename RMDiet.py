# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aeRkpp2NWOJFjO_GUtenZaJx9MyDh3au
"""

import pandas as pd
import plotly.graph_objects as go

# Load data
data = pd.read_csv("https://raw.githubusercontent.com/sanjanaganesh14/Research-Methods/refs/heads/main/Results_21Mar2022.csv")

# 1. Process diet groups
diet_mapping = {
    'fish': 'Pescatarian',
    'meat50': 'Medium Meat (50-99g)',
    'meat100': 'High Meat (>100g)',
    'veggie': 'Vegetarian',
    'vegan': 'Vegan'
}
data['Diet Group'] = data['diet_group'].map(diet_mapping).fillna(data['diet_group'])

# 2. Process age groups
data['Age Category'] = data['age_group'].str.extract(r'(\d+)').astype(int)
data['Age Category'] = pd.cut(data['Age Category'],
                             bins=[0, 29, 39, 49, 59, 69, 100],
                             labels=['20-29', '30-39', '40-49',
                                     '50-59', '60-69', '70+'])

# 3. Normalize impact metrics
impact_metrics = ['mean_ghgs', 'mean_land', 'mean_watscar', 'mean_eut',
                 'mean_bio', 'mean_watuse', 'mean_acid', 'mean_ghgs_ch4',
                 'mean_ghgs_n2o']

normalization_info = {}
for metric in impact_metrics:
    min_val = data[metric].min()
    max_val = data[metric].max()
    data[f'{metric}_norm'] = (data[metric] - min_val) / (max_val - min_val)
    normalization_info[metric] = {'min': min_val, 'max': max_val}

# 4. Aggregate data
agg_data = data.groupby(['Diet Group', 'Age Category', 'sex']).agg({
    'n_participants': 'sum',
    **{f'{metric}_norm': 'mean' for metric in impact_metrics}
}).reset_index()

# 5. Create nodes with clean labels
category_labels = {
    'mean_ghgs': 'GHG Emissions',
    'mean_land': 'Land Use',
    'mean_watscar': 'Water Scarcity',
    'mean_eut': 'Eutrophication',
    'mean_bio': 'Biodiversity Loss',
    'mean_watuse': 'Water Usage',
    'mean_acid': 'Acidification',
    'mean_ghgs_ch4': 'Methane',
    'mean_ghgs_n2o': 'Nitrous Oxide'
}

nodes = (
    list(agg_data['Diet Group'].unique()) +
    list(agg_data['Age Category'].unique()) +
    list(agg_data['sex'].unique()) +
    list(category_labels.values())
)

node_indices = {node: idx for idx, node in enumerate(nodes)}

# 6. Create links with color encoding
all_links = []

# Diet -> Age links
diet_age = agg_data.groupby(['Diet Group', 'Age Category'])['n_participants'].sum().reset_index()
for _, row in diet_age.iterrows():
    all_links.append({
        'source': node_indices[row['Diet Group']],
        'target': node_indices[row['Age Category']],
        'value': row['n_participants'],
        'color': '#2ecc71'  # Green for diet-age flow
    })

# Age -> Gender links
age_gender = agg_data.groupby(['Age Category', 'sex'])['n_participants'].sum().reset_index()
for _, row in age_gender.iterrows():
    all_links.append({
        'source': node_indices[row['Age Category']],
        'target': node_indices[row['sex']],
        'value': row['n_participants'],
        'color': '#3498db'  # Blue for age-gender flow
    })

# Gender -> Impact links
for metric in impact_metrics:
    impact_data = agg_data.groupby(['sex', f'{metric}_norm'])['n_participants'].sum().reset_index()
    for _, row in impact_data.iterrows():
        intensity = int(255 * row[f'{metric}_norm'])
        all_links.append({
            'source': node_indices[row['sex']],
            'target': node_indices[category_labels[metric]],
            'value': row['n_participants'],
            'color': f'rgba(231, 76, 60, {0.4 + row[f"{metric}_norm"]*0.6})'  # Red intensity scale
        })

# 7. Create visualization
fig = go.Figure(go.Sankey(
    node=dict(
        pad=30,
        thickness=25,
        line=dict(color='white', width=1),
        label=nodes,
        color=['#27ae60' if n in agg_data['Diet Group'].unique() else  # Green
              '#2980b9' if n in agg_data['Age Category'].unique() else  # Blue
              '#e74c3c' if n in agg_data['sex'].unique() else  # Red
              '#2c3e50' for n in nodes],  # Dark grey for impacts
        hovertemplate='%{label}<extra></extra>'
    ),
    link=dict(
        source=[l['source'] for l in all_links],
        target=[l['target'] for l in all_links],
        value=[l['value'] for l in all_links],
        color=[l['color'] for l in all_links],
        hovertemplate=(
            "%{source.label} → %{target.label}<br>"
            "Participants: %{value:,}<br>"
            "<extra></extra>"
        )
    )
))

# 8. Add professional styling
fig.update_layout(
    title=dict(
        text="Diet-Environment Impact Analysis",
        x=0.05,
        y=0.95,
        font=dict(size=24, family='Arial', color='#2c3e50')
    ),
    font=dict(family='Arial', size=12, color='#2c3e50'),
    height=1000,
    width=1400,
    margin=dict(l=50, r=300, t=100, b=50),
    paper_bgcolor='white',
    plot_bgcolor='#ecf0f1',
    annotations=[
        dict(
            x=0.02,  # Left position
            y=1,  # Move up slightly
            xref='paper',
            yref='paper',
            text=(
                "<b style='font-size:18px; margin-bottom:10px'>Color Legend</b><br></b><br>"
                "<span style='color:#27ae60; font-size:16px'>■ Diet Groups</span><br><br>"
                "<span style='color:#2980b9; font-size:16px'>■ Age Ranges</span><br><br>"
                "<span style='color:#e74c3c; font-size:16px'>■ Gender</span><br><br>"
                "<span style='color:#2c3e50; font-size:16px'>■ Environmental Impacts</span>"
            ),
            showarrow=False,
            align='left',
            bgcolor='white',
            font=dict(
                family='Arial',
                size=16,
            ),
            width=250,
            height=250,
        )
    ]
)

fig.show()

